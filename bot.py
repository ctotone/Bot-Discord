import discord
import random
import asyncio
from discord.ext import commands
from dotenv import load_dotenv
import os
from flask import Flask
from threading import Thread
import logging
import socket
import sys
import time

# Configuration des logs
logging.basicConfig(level=logging.DEBUG,  # Chang√© en DEBUG pour plus de d√©tails
                    format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# M√©canisme de verrouillage pour une seule instance
def obtain_lock():
    try:
        # Force la suppression du verrou si le processus n'existe plus
        if os.path.exists('.bot.lock'):
            try:
                with open('.bot.lock', 'r') as f:
                    old_pid = int(f.read().strip())
                try:
                    os.kill(old_pid, 0)
                    logger.error(f"Une autre instance du bot est d√©j√† en cours d'ex√©cution (PID: {old_pid})")
                    return False
                except ProcessLookupError:
                    # Le processus n'existe plus, on peut supprimer le fichier
                    logger.info("Suppression du verrou obsol√®te")
                    os.remove('.bot.lock')
            except (ValueError, OSError) as e:
                logger.warning(f"Suppression du verrou invalide: {e}")
                os.remove('.bot.lock')

        # Cr√©e un nouveau fichier de verrouillage
        with open('.bot.lock', 'w') as f:
            f.write(str(os.getpid()))
        return True
    except Exception as e:
        logger.error(f"Erreur lors de la cr√©ation du verrou: {e}")
        if os.path.exists('.bot.lock'):
            try:
                os.remove('.bot.lock')
            except OSError:
                pass
        return False

# Flask app pour le keep-alive
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is alive!"

def find_free_port():
    ports_to_try = [8080, 8081, 8082, 8083, 8084, 8085]
    for port in ports_to_try:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.bind(('0.0.0.0', port))
            sock.close()
            return port
        except OSError:
            continue
    raise RuntimeError("Aucun port disponible trouv√©")

def run_flask():
    try:
        port = find_free_port()
        app.run(host='0.0.0.0', port=port)
    except Exception as e:
        logger.exception(f"Erreur critique lors du d√©marrage du serveur Flask: {e}")

def keep_alive():
    try:
        server = Thread(target=run_flask, daemon=True)
        server.start()
    except Exception as e:
        logger.exception(f"Erreur critique lors du d√©marrage du thread keep-alive: {e}")

# Listes des Atouts et D√©fauts restent inchang√©es
atouts = [
    "L'un de vos sens est exceptionnellement d√©velopp√©. (Vue, ou√Øe, odorat‚Ä¶ √† vous de choisir.)",
    "Votre corps est d'une r√©sistance impressionnante. (Vous encaissez mieux les coups et la fatigue.)",
    "Vous √™tes particuli√®rement souple. (Passer dans des espaces exigus ou esquiver est plus ais√©.)",
    "Vos r√©flexes sont d'une pr√©cision remarquable. (Votre corps r√©agit plus vite que votre pens√©e.)",
    "Votre musculature est bien au-dessus de la moyenne. (Force physique accrue.)",
    "Vous √™tes incroyablement endurant. (Fatigue physique retard√©e, courses prolong√©es possibles.)",
    "Votre corps se remet vite des blessures. (Cicatrisation acc√©l√©r√©e, douleurs moins handicapantes.)",
    "Vous avez une coordination parfaite. (Aucune maladresse, mouvements fluides et pr√©cis.)",
    "Votre respiration est ma√Ætris√©e. (Plong√©e en apn√©e, endurance en conditions difficiles.)",
    "Votre voix est captivante et autoritaire. (Difficile √† ignorer, parfait pour imposer sa pr√©sence.)"
]

defauts = [
    "L'un de vos sens est particuli√®rement faible. (Vision trouble, mauvaise ou√Øe, odorat quasi inexistant‚Ä¶)",
    "Votre corps est fragile et supporte mal les blessures. (Moins de r√©sistance aux coups et chocs.)",
    "Vous √™tes √©tonnamment maladroit. (Vos gestes manquent de pr√©cision, risque accru de rater des actions fines.)",
    "Vous souffrez d'un handicap physique l√©ger. (Boiterie, bras moins fonctionnel, manque de mobilit√©‚Ä¶)",
    "Votre force est anormalement basse. (Difficult√© √† soulever, porter, ou utiliser des objets lourds.)",
    "Votre endurance est limit√©e. (Vous vous fatiguez plus vite que la normale.)",
    "Votre corps gu√©rit tr√®s lentement. (Les blessures, m√™me mineures, mettent du temps √† dispara√Ætre.)",
    "Vous manquez de coordination. (Vos mouvements sont parfois impr√©cis ou h√©sitants.)",
    "Votre respiration est faible. (Difficult√© en altitude, en apn√©e, ou lors d'efforts prolong√©s.)",
    "Votre voix est faible ou monotone. (Difficile √† entendre ou √† rendre captivante.)"
]

# Historique des tirages et syst√®mes de verrouillage
recent_tirages = {}
command_lock = {}
processed_messages = set()  # Pour la d√©duplication des messages

def nettoyer_historique():
    maintenant = time.time()
    a_supprimer = []
    for tirage, timestamp in recent_tirages.items():
        if maintenant - timestamp > 3600:
            a_supprimer.append(tirage)
    for tirage in a_supprimer:
        del recent_tirages[tirage]

def tirage_unique(liste, historique):
    nettoyer_historique()
    maintenant = time.time()
    candidats = [item for item in liste if item not in historique.keys()]
    if not candidats:
        temps_restant = int(3600 - (maintenant - min(historique.values())))
        minutes = temps_restant // 60
        secondes = temps_restant % 60
        raise ValueError(f"Tous les √©l√©ments sont en cooldown. Veuillez attendre {minutes}m {secondes}s.")

    choix = random.choice(candidats)
    historique[choix] = maintenant
    return choix

# Configuration du bot avec des intents minimaux
load_dotenv()
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

@bot.event
async def on_ready():
    logger.info(f'Bot connect√© en tant que {bot.user}')

@bot.command()
async def lucie(ctx):
    # D√©duplication des messages
    message_id = f"{ctx.message.id}"
    if message_id in processed_messages:
        logger.warning(f"Message {message_id} d√©j√† trait√©, ignor√©")
        return
    processed_messages.add(message_id)

    # Nettoyage p√©riodique des messages trait√©s
    if len(processed_messages) > 1000:
        processed_messages.clear()

    # V√©rifications de base
    if not ctx.guild:
        logger.debug(f"Commande ignor√©e car envoy√©e en DM par {ctx.author.name}")
        return

    user_id = str(ctx.author.id)
    logger.info(f"Nouvelle commande lucie de {ctx.author.name} (ID: {user_id}, Message ID: {message_id})")

    if user_id in command_lock and command_lock[user_id]:
        logger.warning(f"Commande d√©j√† en cours pour {ctx.author.name}")
        await ctx.send("Une commande est d√©j√† en cours pour vous. Veuillez attendre.")
        return

    try:
        command_lock[user_id] = True
        logger.debug(f"Verrou activ√© pour {ctx.author.name}")

        try:
            atout = tirage_unique(atouts, recent_tirages)
            defaut = tirage_unique(defauts, recent_tirages)
            await ctx.send(f"üé≤ **R√©sultat du tirage :**\nüé≠ **Atout :** {atout}\n‚ö†Ô∏è **D√©faut :** {defaut}")
            logger.info(f"Tirage r√©ussi pour {ctx.author.name} (Message ID: {message_id})")
        except ValueError as ve:
            await ctx.send(str(ve))
            return

    except Exception as e:
        logger.exception(f"Erreur lors de l'ex√©cution de la commande lucie: {e}")
        await ctx.send("Une erreur s'est produite lors du tirage. Veuillez r√©essayer.")
    finally:
        command_lock[user_id] = False
        logger.debug(f"Verrou d√©sactiv√© pour {ctx.author.name}")

if __name__ == '__main__':
    if obtain_lock():
        try:
            keep_alive()
            token = os.getenv('DISCORD_TOKEN')
            if not token:
                logger.error("Token Discord non trouv√© dans les variables d'environnement")
                sys.exit(1)
            bot.run(token)
        except Exception as e:
            logger.exception(f"Erreur critique lors du d√©marrage du bot: {e}")
        finally:
            try:
                os.remove('.bot.lock')
                logger.info("Fichier de verrouillage supprim√©")
            except OSError:
                pass
    else:
        logger.error("Impossible d'obtenir le verrou. Une autre instance est peut-√™tre d√©j√† en cours d'ex√©cution.")
        sys.exit(1)